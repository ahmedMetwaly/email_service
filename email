import 'dart:convert';
import 'dart:io';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:ftl_group/core/models/email_model.dart';
import 'package:ftl_group/core/networking/api_service.dart';
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';
import 'package:image/image.dart' as img;
import 'package:path_provider/path_provider.dart';
import 'image_manager.dart';

class ContainerForEmail {
  final String containerType;
  final int containerQuantity;
  final double containerPrice;

  ContainerForEmail({
    required this.containerType,
    required this.containerQuantity,
    required this.containerPrice,
  });
}

class EmailService {
  final ApiService apiService;

  EmailService(this.apiService);

  Future<void> sendEmail({
    required String clientEmail,
    required String pol,
    required String pod,
    required List<ContainerForEmail> containers,
    required String ticketNo,
    File? pdfFile,
    String companyLogoPath = ImageManager.logoWhite,
  }) async {
  /*   // Load credentials from .env
    String username = dotenv.env['EMAIL_USER'] ?? '';
    String password = dotenv.env['EMAIL_PASS'] ?? ''; */
    /*  const String username = String.fromEnvironment('EMAIL_USER');
    const String password = String.fromEnvironment('EMAIL_PASS');
 */
  /*   if (username.isEmpty || password.isEmpty) {
      throw Exception('Email credentials not found in .env');
    } */

/*     // Configure SMTP server for AWS SES
    final smtpServer = SmtpServer(
      "smtp.mail.us-east-1.awsapps.com",
      port: 465,
      username: username,
      password: password,
      ssl: true,
      allowInsecure: false,
    ); */

    // Convert company logo to Base64
    String logoBase64 = '';
    try {
      final File logoFile = File(companyLogoPath);
      final logoImage = img.decodeImage(logoFile.readAsBytesSync());
      if (logoImage != null) {
        final tempDir = await getTemporaryDirectory();
        final tempLogoPath = '${tempDir.path}/logo.png';
        File(tempLogoPath).writeAsBytesSync(img.encodePng(logoImage));
        logoBase64 = base64Encode(File(tempLogoPath).readAsBytesSync());
      }
    } catch (e) {
      print('Error loading logo: $e');
    }

    // Render container details
    String renderContainerDetails(List<ContainerForEmail> containers) {
      return containers.map((c) => '''
      <div style="padding: 16px; background: white; border-radius: 6px; border: 1px solid #e2e8f0; margin-bottom: 12px;">
        <div style="font-size: 12px; color: #718096; margin-bottom: 4px;">Type</div>
        <div style="font-weight: 600; color: #2d3748;">${c.containerType.toString().split('.').last}</div>
        <div style="font-size: 12px; color: #718096; margin-top: 8px;">Quantity: ${c.containerQuantity}</div>
        <div style="${c.containerPrice > 0 ? 'font-size: 12px; color: #718096;' : 'display:none'}">Price: \$${c.containerPrice * c.containerQuantity}</div>
      </div>
      ''').join('');
    }

    // HTML template
    final String htmlTemplate = '''
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>Container Request</title>
      </head>
      <body style="margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f7fafc;">
        <table width="100%" border="0" cellpadding="0" cellspacing="0" style="background-color: #f7fafc;">
          <tr>
                <td align="center">
                  <table
                    width="100%"
                    border="0"
                    cellpadding="0"
                    cellspacing="0"
                    style="
                      max-width: 600px;
                      margin: 20px 0;
                      background: #ffffff;
                      border-radius: 12px;
                    "
                  >
                    <!-- Header -->
                    <tr>
                      <td
                        style="
                          background-color: #e5e7eb;
                          padding: 32px;
                          border-radius: 12px 12px 0 0;
                          text-align: center;
                        "
                      >
<img src="https://res.cloudinary.com/dgful9iue/image/upload/v1747303507/freightin_sw7vxq.png" alt="FreightIn Logo" style="max-width: 200px; height: auto;" />
                      </td>
                    </tr>
                <!-- Content -->
                <tr>
                  <td style="padding: 40px 32px;">
                    <h2 style="color: #2d3748; margin: 0 0 12px 0; font-size: 24px; border-bottom: 2px solid #667eea; padding-bottom: 12px; display: inline-block;">
                      ðŸš¢ Your Container Request Received
                    </h2>
                    <p style="font-size: 14px; color: #4a5568; margin: 0  Pollock 0 28px 0;">
                      <strong>Ticket No:</strong> $ticketNo
                    </p>
                    <!-- POL and POD Containers -->
                    <table width="100%" border="0" cellpadding="0" cellspacing="0" style="margin-bottom: 20px;">
                      <tr>
                        <td width="45%" style="padding: 20px; background: #f9fafb; border-radius: 8px; border: 1px solid #e2e8f0; vertical-align: top;">
                          <div style="font-size: 14px; color: #718096; margin-bottom: 10px; font-weight: 500;">POL</div>
                          <div style="font-weight: 600; color: #2d3748; font-size: 16px;">$pol</div>
                        </td>
                        <td width="10%" style="font-size: 0;">&nbsp;</td>
                        <td width="45%" style="padding: 20px; background: #f9fafb; border-radius: 8px; border: 1px solid #e2e8f0; vertical-align: top;">
                          <div style="font-size: 14px; color: #718096; margin-bottom: 10px; font-weight: 500;">POD</div>
                          <div style="font-weight: 600; color: #2d3748; font-size: 16px;">$pod</div>
                        </td>
                      </tr>
                    </table>
                    <!-- Container Details -->
                    <h4 style="color: #2d3748; font-size: 18px; margin: 20px 0 16px; padding-bottom: 8px; border-bottom: 1px solid #e2e8f0;">
                      Container Details
                    </h4>
                    <div>${renderContainerDetails(containers)}</div>
                    <!-- Next Steps -->
                    <div style="color: #4a5568; line-height: 1.6; margin-top: 32px; background: #f8fafc; padding: 20px; border-radius: 8px;">
                      <p style="margin: 0;">
                        ðŸ“¬ <strong>Next Steps:</strong> Our logistics team is reviewing your request. You'll receive a detailed quote within 24 hours.
                      </p>
                    </div>
                  </td>
                </tr>
                <!-- Footer -->
                <tr>
                      <td
                        style="
                          padding: 24px 32px;
                          background-color: #e5e7eb;
                          border-radius: 0 0 12px 12px;
                          text-align: center;
                          font-size: 12px;
                          color: #a0aec0;
                        "
                      >
                        <p style="margin: 4px 0">
                          Â© 2025 FreightIn. All rights reserved.
                        </p>
                        </p>
                      </td>
                    </tr>
              </table>
            </td>
          </tr>
        </table>
      </body>
    </html>
    ''';

    /* // Create email message
    final message = Message()
      ..from = Address(username, 'FreightIn')
      ..recipients.add(clientEmail)
      ..subject = 'Your Container Request Received - FreightIn'
      ..html = htmlTemplate;

    if (pdfFile != null) {
      message.attachments
          .add(FileAttachment(pdfFile, fileName: 'quotation.pdf'));
    }
 */
    // Send email
    try {
      await sendEmailFromAPI(
          clientEmail: clientEmail, htmlTemplate: htmlTemplate);
      /*   final sendReport =
          await send(message, smtpServer).timeout(const Duration(seconds: 30)); */
      print('Message sent');
    } catch (e) {
      print('Error sending email: $e');
      throw Exception('Failed to send email: $e');
    }
  }

  Future<void> sendEmailFromAPI(
      {required String clientEmail, required String htmlTemplate}) async {
    try {
      await apiService.sendEmail(EmailModel(
          to: clientEmail,
          subject: 'Your Container Request Received - FreightIn',
          html: htmlTemplate));
    } catch (e) {
      print(e);
      throw Exception('Failed to send email: $e');
    }
  }
}
